{
    "sourceFile": "equihashverify.cc",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1668195791336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1668195791336,
            "name": "Commit-0",
            "content": "#include <nan.h>\r\n#include <node.h>\r\n#include <node_buffer.h>\r\n#include <v8.h>\r\n#include <stdint.h>\r\n#include \"crypto/equihash.h\"\r\n\r\n#include <vector>\r\nusing namespace v8;\r\n\r\nconst char *ToCString(const String::Utf8Value &value)\r\n{\r\n    return *value ? *value : \"<string conversion failed>\";\r\n}\r\n\r\nint verifyEH(const char *hdr, const std::vector<unsigned char> &soln, const char *personalizationString, unsigned int N, unsigned int K)\r\n{\r\n    // Hash state\r\n    crypto_generichash_blake2b_state state;\r\n    EhInitialiseState(N, K, state, personalizationString);\r\n\r\n    crypto_generichash_blake2b_update(&state, (const unsigned char *)hdr, 204);\r\n\r\n    bool isValid;\r\n\r\n    EhIsValidSolution(N, K, state, soln, isValid);\r\n\r\n    return isValid;\r\n}\r\n\r\nvoid Verify(const v8::FunctionCallbackInfo<Value> &args)\r\n{\r\n    Isolate *isolate = Isolate::GetCurrent();\r\n    HandleScope scope(isolate);\r\n    printf(\"lalalalal####################################\\n\");\r\n    if (args.Length() < 4)\r\n    {\r\n        isolate->ThrowException(\r\n            Exception::TypeError(String::NewFromUtf8(isolate, \"Wrong number of arguments\")));\r\n\r\n        return;\r\n    }\r\n    printf(\"lalalalal####################################1\\n\");\r\n    if (!args[3]->IsInt32() || !args[4]->IsInt32())\r\n    {\r\n        isolate->ThrowException(\r\n            Exception::TypeError(String::NewFromUtf8(isolate, \"Fourth and fifth parameters should be equihash parameters (n, k)\")));\r\n\r\n        return;\r\n    }\r\n    printf(\"lalalalal####################################2\\n\");\r\n    Local<Object> header = args[0]->ToObject();\r\n    Local<Object> solution = args[1]->ToObject();\r\n\r\n    if (!node::Buffer::HasInstance(header) || !node::Buffer::HasInstance(solution))\r\n    {\r\n        isolate->ThrowException(\r\n            Exception::TypeError(String::NewFromUtf8(isolate, \"First two arguments should be buffer objects.\")));\r\n\r\n        return;\r\n    }\r\n    printf(\"lalalalal\\n\");\r\n    if (!args[2]->IsString())\r\n    {\r\n        isolate->ThrowException(\r\n            Exception::TypeError(String::NewFromUtf8(isolate, \"Third argument should be the personalization string.\")));\r\n\r\n        return;\r\n    }\r\n    printf(\"lalalalal\\n\");\r\n    const char *hdr = node::Buffer::Data(header);\r\n    printf(\"lalalalal\\n\");\r\n    if (node::Buffer::Length(header) != 204)\r\n    {\r\n        // invalid hdr length\r\n        printf(\"222222222222222204\")\r\n            args.GetReturnValue()\r\n                .Set(false);\r\n        return;\r\n    }\r\n\r\n    const char *soln = node::Buffer::Data(solution);\r\n\r\n    std::vector<unsigned char> vecSolution(soln, soln + node::Buffer::Length(solution));\r\n\r\n    String::Utf8Value str(args[2]);\r\n    const char *personalizationString = ToCString(str);\r\n\r\n    // Validate for N, K (4th and 5th parameters)\r\n    bool result = verifyEH(\r\n        hdr,\r\n        vecSolution,\r\n        personalizationString,\r\n        args[3].As<Uint32>()->Value(),\r\n        args[4].As<Uint32>()->Value());\r\n\r\n    args.GetReturnValue().Set(result);\r\n}\r\n\r\nvoid Init(Handle<Object> exports)\r\n{\r\n    NODE_SET_METHOD(exports, \"verify\", Verify);\r\n}\r\n\r\nNODE_MODULE(equihashverify, Init)\r\n"
        }
    ]
}